#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

int arr[200] = { 0 };

#define MAX_QUEUE 100

typedef struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

typedef struct {
    TreeNode* items[MAX_QUEUE];
    int front, rear;
} Queue;

// Queue 함수들
void InitQueue(Queue* pqueue) {
    pqueue->front = pqueue->rear = -1;
}

bool isEmpty(Queue* queue) {
    return queue->front == -1;
}
bool isFull(Queue* pqueue) {
    return pqueue->front == (pqueue->rear + 1) % MAX_QUEUE;
}


void Enqueue(Queue* pqueue, TreeNode* root) {
    if (isFull(pqueue))
        exit(1);
    pqueue->rear = (pqueue->rear + 1) % MAX_QUEUE;
    pqueue->items[pqueue->rear] = root;
}

void Dequeue(Queue* pqueue) {
    if (isEmpty(pqueue))
        exit(1);
    pqueue->front = (pqueue->front + 1) % MAX_QUEUE;
}

TreeNode* Peek(Queue* pqueue) {
    if (isEmpty(pqueue))
        exit(1);
    else
        return pqueue->items[pqueue->front];
}

// 레벨 순서대로 이진 트리에 노드 삽입
void insertLevelOrder(TreeNode* root, int val) {
    Queue queue;
    if (root == NULL) exit(1);
    InitQueue(&queue);
    Enqueue(&queue, root);//루트 노트 EnQueue

    while (!isEmpty(&queue))
    {
        root = Peek(&queue);
        Dequeue(&queue);

        if (root->left= NULL)
            Enqueue(&queue, root->left);
        if (root->right!= NULL)
            Enqueue(&queue, root->right);
    }
}

//
//TreeNode* createNode(int val) {
//    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
//    newNode->val = val;
//    newNode->left = NULL;
//    newNode->right = NULL;
//    return newNode;
//}

bool isOneExists(TreeNode* node) {
    if (node == NULL)
        return false;
    bool leftIsOneExists = isOneExists(node->left);
    bool rightIsOneExists = isOneExists(node->right);

    if (!leftIsOneExists) node->left = NULL;
    if (!rightIsOneExists) node->right = NULL;

    return node->val == 1 || leftIsOneExists || rightIsOneExists;
}

void printBTree(TreeNode* root) {
    Queue queue;
    InitQueue(&queue);
    Enqueue(&queue, root);//루트 노드 EnQueue

    while (!isEmpty(&queue))
    {
        root = Peek(&queue);
        Dequeue(&queue);

        printf("%d ", root->val);
        if (root->left != NULL)
            Enqueue(&queue, root->left);
        if (root->right != NULL)
            Enqueue(&queue, root->right);
    }
}

TreeNode* solution(TreeNode* root) {
    isOneExists(root);
    return root;
}

int main() {
    int i = 0, cnt = 0;
    char str[400] = { 0 };
    char* s;
    scanf_s("%[^\n]", str);
    for (i = 2; i > 1; cnt += i > 0) {
        i = scanf_s(str, "%d%*[ ]%[^\n]", &arr[cnt], str);
    }

    TreeNode* root = NULL;

    for (int i = 0; i < sizeof(arr) / sizeof(arr[0]); ++i) {
        insertLevelOrder(root, arr[i]);
    }

    solution(root);

    // print tree as array
    printBTree(root);

    return 0;
}
