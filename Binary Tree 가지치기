#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

int arr[200] = { 0 };

#define MAX_QUEUE 100

typedef struct TreeNode{
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;
typedef struct {
    struct TreeNode* root;
    struct TreeNode* items[200];
}BTree;

// Queue 함수들
typedef struct {
    TreeNode* items[MAX_QUEUE];
    int front, rear;
} Queue;
void InitQueue(Queue* pqueue) {
    pqueue->front = pqueue->rear = -1;
}
bool isEmpty(Queue* queue) {
    return queue->front == -1;
}
bool isFull(Queue* pqueue) {
    return pqueue->front == (pqueue->rear + 1) % MAX_QUEUE;
}
void Enqueue(Queue* pqueue, TreeNode* root) {
    if (isFull(pqueue))
        exit(1);
    pqueue->rear = (pqueue->rear + 1) % MAX_QUEUE;
    pqueue->items[pqueue->rear] = root;
}
void Dequeue(Queue* pqueue) {
    if (isEmpty(pqueue))
        exit(1);
    pqueue->front = (pqueue->front + 1) % MAX_QUEUE;
}
TreeNode* Peek(Queue* pqueue) {
    if (isEmpty(pqueue))
        exit(1);
    else
        return pqueue->items[pqueue->front];
}

TreeNode* CreateNode(int val)
{
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    if (!newNode) exit(1);
    newNode->val = val;
    newNode->left = newNode->right = NULL;
    return newNode;
}

//주어진 배열을 가지고 BinaryTree 1만들기 
bool isOneExists(TreeNode* node) {
    if (node == NULL)
        return false;
    bool leftIsOneExists = isOneExists(node->left);
    bool rightIsOneExists = isOneExists(node->right);

    if (!leftIsOneExists) node->left = NULL;
    if (!rightIsOneExists) node->right = NULL;

    return node->val == 1 || leftIsOneExists || rightIsOneExists;
}
void printBTree(TreeNode* root) {
    Queue queue;
    InitQueue(&queue);
    Enqueue(&queue, root);//루트 노드 EnQueue

    while (!isEmpty(&queue))
    {
        root = Peek(&queue);
        Dequeue(&queue);

        printf("%d ", root->val);
        if (root->left != NULL)
            Enqueue(&queue, root->left);
        if (root->right != NULL)
            Enqueue(&queue, root->right);
    }
}
TreeNode* solution(TreeNode* root) {
    isOneExists(root);
    return root;
}
void SetLeft(BTree* btree,int val,int parent_idx) {
    TreeNode* newNode= CreateNode(val);
    if (btree->items[parent_idx]->left != NULL)
        exit(1);
    btree->items[parent_idx]->left = newNode;
}
void SetRight(BTree* btree,int val, int parent_idx) {
    TreeNode* newNode = CreateNode(val);
    if (btree->items[parent_idx]->right != NULL)
        exit(1);
    btree->items[parent_idx]->right = newNode;
}

//void CreateLeftSubtree(TreeNode* root, TreeNode* left) {
//    if (root->left!= NULL) 
//        exit(1);
//    root->left= left;
//}
//
//void CreateRightSubtree(TreeNode* root, TreeNode* right) {
//    if (root->right!= NULL)//이미 존재한다면 
//        exit(1);
//    root->right= right;
//}

 int main() {
    int i = 0, cnt = 0;
    char str[400] = { 0 };
    char* s;
    scanf_s("%[^\n]", str);
    for (i = 2; i > 1; cnt += i > 0) {
        i = sscanf_s(str, "%d%*[ ]%[^\n]", &arr[cnt], str);
    }

    TreeNode* root = NULL;
    BTree* btree=NULL;

    btree->root = CreateNode(arr[i]);

    for (i = 0; i < 200; i=i*2)
    {
        //Set함수(트리, 값, 부모 인덱스)
        SetLeft(btree,arr[i], i);
        SetRight(btree,arr[i], i + 1);
    }

    for (i = 0; i < 200; i++)
        printf("%d  ", arr[i]);

    solution(root);

    // print tree as array
    printBTree(root);

    return 0;
}
