#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

int arr[200] = {0};
#define MAX_QUEUE 200

typedef struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

// Queue 함수들


typedef struct {
    TreeNode* items[MAX_QUEUE];
    int front, rear;
} Queue;

void InitQueue(Queue* pqueue) {
    pqueue->rear = 0;
    pqueue->front = 0;
}

bool IsEmpty(Queue* pqueue) {
    return  pqueue->front == pqueue->rear;
}

bool IsFull(Queue* pqueue) {
    //rear다음이 바로 front인지 확인
    return pqueue->front == (pqueue->rear + 1) % MAX_QUEUE;
}

void Enqueue(Queue* pqueue, TreeNode* root) {
    if (IsFull(pqueue))
        exit(188);
    pqueue->rear = (pqueue->rear + 1) % MAX_QUEUE;
    pqueue->items[pqueue->rear] = root;
}

void Dequeue(Queue* pqueue) {
    if (IsEmpty(pqueue))
        exit(1);
    pqueue->front = (pqueue->front + 1) % MAX_QUEUE;
}

TreeNode* Peek(Queue* pqueue) {
    if (IsEmpty(pqueue))
        exit(1);
    else
        return pqueue->items[pqueue->front];
}

TreeNode* CreateNode(int val)
{
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    newNode->val = val;
    newNode->left = newNode->right = NULL;
    return newNode;
}

void DestroyNode(TreeNode* node) {
	free(node);
}

//주어진 배열을 가지고 BinaryTree 가지치기 
bool isOneExists(TreeNode* root) {
    if (root == NULL)
        return false;
    bool leftIsOneExists = isOneExists(root->left);
    bool rightIsOneExists = isOneExists(root->right);

    if (!leftIsOneExists)
        root->left = NULL;
    if (!rightIsOneExists)
        root->right = NULL;

    return root->val == 1 || leftIsOneExists || rightIsOneExists;
}

//LevelOrder로 print 
void printBTree(TreeNode* root) {
    Queue queue;
    InitQueue(&queue);
    Enqueue(&queue, root);

    while (!IsEmpty(&queue))
    {
        TreeNode* cur= Peek(&queue);
        Dequeue(&queue);

        printf("%d ", cur->val);
        if (cur->left != NULL)
            Enqueue(&queue, cur->left);
        if (cur->right != NULL)
            Enqueue(&queue, cur->right);
    }
}


TreeNode* solution(TreeNode* root) {
    return root;
}

void arrayToTree(TreeNode* root, int arr[]) {
    //배열의 첫 번째 요소는 루트 노드
    int temp[201] = { 0 };//삽입을 위한 새로운 배열 추가 
    for (int i = 0; i < 200; i++)
       temp[i + 1] = arr[i];//인덱스 하나씩 증가시키고 원소 복사

    Queue pqueue;
    InitQueue(&pqueue);
    Enqueue(&pqueue, root);//pqueue 

    for (int i = 1; i <= 100; i++) {
        TreeNode* cur_root = Peek(&pqueue);//현재 
        Dequeue(&pqueue);//Dequeue 
        cur_root->left = CreateNode(temp[i * 2]);
				
        Enqueue(&pqueue, cur_root->left);
        cur_root->right = CreateNode(temp[i * 2 + 1]);
        Enqueue(&pqueue, cur_root->right);
    }
}

int main() {
    //////
    int i = 0, cnt = 0;
    char str[400] = { 0 };
    char* s;

    scanf("%[^\n]", str);
    for (i = 2; i > 1; cnt += i > 0) {
        i = sscanf(str, "%d%*[ ]%[^\n]", &arr[cnt], str);
    }
    for (int i = 0; i < 200; i++)
        printf("%d ", arr[i]);
     
    //// arr에 값이 저장됨.
    TreeNode *root=CreateNode(arr[0]);
   	// arrayToTree(root, arr);//배열을 Tree로 변환
	  int temp[201] = { 0 };//삽입을 위한 새로운 배열 추가 
    for (int i = 0; i < 200; i++)
       temp[i + 1] = arr[i];//인덱스 하나씩 증가시키고 원소 복사

    Queue pqueue;
    InitQueue(&pqueue);
    Enqueue(&pqueue, root);//pqueue 

    for (int i = 1; i <= 100; i++) {
        TreeNode* cur = Peek(&pqueue);//현재 
        Dequeue(&pqueue);//Dequeue 
        cur->left = CreateNode(temp[i * 2]);
        Enqueue(&pqueue, cur->left);
        cur->right = CreateNode(temp[i * 2 + 1]);
        Enqueue(&pqueue, cur->right);
    }
	
    root = solution(root);
    //// print tree as array
    printBTree(root);
		free(root);
    return 0;
}

