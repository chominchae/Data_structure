#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int arr[200] = { 0, };

typedef struct TreeNode {
	int val;
	struct TreeNode* left;
	struct TreeNode* right;
} TreeNode; 

bool isOneExits();

TreeNode* solution(TreeNode* root) {
	//root가 NULL일 수는 없음 
	//root의 자식 노드가 NULL이면 패스

	return isOneExits(root);
}

//서브트리의 노드가 1을 포함하는지 확인하는 함수 
bool isOneExits(struct TreeNode* node) {
	if (node == NULL) return false;
	bool leftIsOneExits = isOneExits(node->left);
	bool rightIsOneExits = isOneExits(node->right);

	//1을 포함하지 않으면 가지치기
	if (!leftIsOneExits) node->left = NULL;
	if (!rightIsOneExits) node->right = NULL;

	//1을 포함하면 
	return node->val == 1 || leftIsOneExits || rightIsOneExits;
}


int main() {
	// DO NOT MODIFY //
	int i = 0, cnt = 0;
	char str[400] = { 0, };
	char* s;
	scanf("%[^\n]", str);
	for (i = 2; i > 1; cnt += i > 0) {
		i = scanf_s(str, "%d%*[ ]%[^\n]", &arr[cnt], str);
	}
	// 위 코드를 수행하면 arr 에는 각 원소에 입력으로 받은 노드들이 저장됩니다.
	///////////////////

	TreeNode root;
	root = solution(root);

	// print tree as array

	return 0;
}
